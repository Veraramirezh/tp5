import arcade
import random

from Game_state import GameState
from attack_animation import AttackType
from attack_animation import AttackAnimation

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
SCREEN_TITLE = "Roche, papier, ciseaux"
SPRITE_SCALING_PLAYER = 0.20
SPRITE_SCALING_OBJECTS = 0.25


class MyGame(arcade.Window):
    def __init__(self, width, height, title):
        super().__init__(width, height, title)
        arcade.set_background_color(arcade.color.AMAZON)
        self.player = None
        self.computer = None
        self.rock = None
        self.paper = None
        self.scissors = None
        self.computer_attack = None
        self.player_attack_type = None
        self.computer_attack_type = None
        self.game_state = GameState.NOT_STARTED
        self.player_score = 0
        self.computer_score = 0
        self.player_attacked = False
        self.player_wins_round = False
        self.ronde_nulle = False
    def setup(self):
        self.player = arcade.Sprite("assets/faceBeard.png", SPRITE_SCALING_PLAYER)
        self.player.center_x = 200
        self.player.center_y = 225
        self.computer = arcade.Sprite("assets/compy.png")
        self.computer.center_x = 600
        self.computer.center_y = 225
        self.rock = arcade.Sprite("assets/srock.png", SPRITE_SCALING_OBJECTS)
        self.paper = arcade.Sprite("assets/spaper.png", SPRITE_SCALING_OBJECTS)
        self.scissors = arcade.Sprite("assets/scissors.png", SPRITE_SCALING_OBJECTS)
    def on_draw(self):
        arcade.start_render()
        arcade.draw_text("Roche, papier, ciseaux",
                         0, 500, arcade.csscolor.DARK_MAGENTA, 50, width=SCREEN_WIDTH, align="center")
        arcade.draw_text(f"Le pointage du joueur est {self.player_score} ",
                         100, 100, arcade.csscolor.HONEYDEW, 10, width=SCREEN_WIDTH, align="left")
        arcade.draw_text(f"Le pointage de l'ordinateur est {self.computer_score}",
                         500, 100, arcade.csscolor.HONEYDEW, 10, width=SCREEN_WIDTH, align="left")
        self.player.draw()
        self.computer.draw()
        if self.game_state == GameState.NOT_STARTED:
            arcade.draw_text("Appuyer sur une image pour faire une attaque !",
                             0, 450, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            arcade.draw_rectangle_outline(125, 150, 50, 50, arcade.color.SIENNA)
            self.rock.center_x = 125
            self.rock.center_y = 150
            self.rock.draw()
            arcade.draw_rectangle_outline(200, 150, 50, 50, arcade.color.SIENNA)
            self.paper.center_x = 200
            self.paper.center_y = 150
            self.paper.draw()
            arcade.draw_rectangle_outline(275, 150, 50, 50, arcade.color.SIENNA)
            self.scissors.center_x = 275
            self.scissors.center_y = 150
            self.scissors.draw()
            arcade.draw_rectangle_outline(600, 150, 50, 50, arcade.color.SIENNA)
        elif self.game_state == GameState.ROUND_ACTIVE:
            arcade.draw_text("Appuyer sur une image pour faire une attaque !",
                             0, 450, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            arcade.draw_rectangle_outline(125, 150, 50, 50, arcade.color.SIENNA)
            self.rock.center_x = 125
            self.rock.center_y = 150
            self.rock.draw()
            arcade.draw_rectangle_outline(200, 150, 50, 50, arcade.color.SIENNA)
            self.paper.center_x = 200
            self.paper.center_y = 150
            self.paper.draw()
            arcade.draw_rectangle_outline(275, 150, 50, 50, arcade.color.SIENNA)
            self.scissors.center_x = 275
            self.scissors.center_y = 150
            self.scissors.draw()
            arcade.draw_rectangle_outline(600, 150, 50, 50, arcade.color.SIENNA)
        elif self.game_state == GameState.ROUND_DONE:
            arcade.draw_text("Appuyer sur 'ESPACE' pour commencer une nouvelle ronde !",
                             0, 450, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            if self.player_wins_round:
                arcade.draw_text("Vous avez gagné la ronde !",
                                 0, 350, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            else:
                if self.ronde_nulle:
                    arcade.draw_text("Match nul !",
                                     0, 350, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
                else:
                    arcade.draw_text("L'ordinateur a gagné la ronde !",
                                     0, 350, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            arcade.draw_rectangle_outline(125, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.ROCK:
                self.rock.center_x = 125
                self.rock.center_y = 150
                self.rock.draw()
            arcade.draw_rectangle_outline(200, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.PAPER:
                self.paper.center_x = 200
                self.paper.center_y = 150
                self.paper.draw()
            arcade.draw_rectangle_outline(275, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.SCISSORS:
                self.scissors.center_x = 275
                self.scissors.center_y = 150
                self.scissors.draw()
            arcade.draw_rectangle_outline(600, 150, 50, 50, arcade.color.SIENNA)
            self.computer_attack.center_x = 600
            self.computer_attack.center_y = 150
            self.computer_attack.draw()
        elif self.game_state == GameState.GAME_OVER:
            if self.player_score == 3:
                arcade.draw_text("Vous avez gagné la partie !",
                                 0, 350, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            elif self.computer_score == 3:
                arcade.draw_text("Vous avez perdu la partie !",
                                 0, 350, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")

            arcade.draw_text("La partie est terminée.",
                             0, 400, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")
            arcade.draw_text("Appuyer sur 'ESPACE' pour débuter une nouvelle partie.",
                             0, 450, arcade.csscolor.HONEYDEW, 20, width=SCREEN_WIDTH, align="center")

            arcade.draw_rectangle_outline(125, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.ROCK:
                self.rock.center_x = 125
                self.rock.center_y = 150
                self.rock.draw()
            arcade.draw_rectangle_outline(200, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.PAPER:
                self.paper.center_x = 200
                self.paper.center_y = 150
                self.paper.draw()
            arcade.draw_rectangle_outline(275, 150, 50, 50, arcade.color.SIENNA)
            if self.player_attack_type == AttackType.SCISSORS:
                self.scissors.center_x = 275
                self.scissors.center_y = 150
                self.scissors.draw()
            arcade.draw_rectangle_outline(600, 150, 50, 50, arcade.color.SIENNA)
            self.computer_attack.center_x = 600
            self.computer_attack.center_y = 150
            self.computer_attack.draw()
    def on_update(self, delta_time):
        if self.player_attacked:
            self.rock.on_update()
            self.paper.on_update()
            self.scissors.on_update()
        if self.game_state == GameState.ROUND_ACTIVE and self.player_attacked:
            pc_attack = random.randint(0, 2)
            if pc_attack == 0:
                self.computer_attack_type = AttackType.ROCK
                self.computer_attack = arcade.Sprite("assets/srock-attack.png", SPRITE_SCALING_OBJECTS)
                if self.player_attack_type == AttackType.PAPER and self.computer_attack_type == AttackType.ROCK:
                    self.player_score += 1
                    self.player_wins_round = True
                elif self.player_attack_type == AttackType.SCISSORS and self.computer_attack_type == AttackType.ROCK:
                    self.computer_score += 1
                else:
                    self.ronde_nulle = True
            elif pc_attack == 1:
                self.computer_attack_type = AttackType.PAPER
                self.computer_attack = arcade.Sprite("assets/spaper-attack.png", SPRITE_SCALING_OBJECTS)
                if self.player_attack_type == AttackType.ROCK and self.computer_attack_type == AttackType.PAPER:
                    self.computer_score += 1
                elif self.player_attack_type == AttackType.SCISSORS and self.computer_attack_type == AttackType.PAPER:
                    self.player_score += 1
                    self.player_wins_round = True
                else:
                    self.ronde_nulle = True
            else:
                self.computer_attack_type = AttackType.SCISSORS
                self.computer_attack = arcade.Sprite("assets/scissors-close.png", SPRITE_SCALING_OBJECTS)
                if self.player_attack_type == AttackType.ROCK and self.computer_attack_type == AttackType.SCISSORS:
                    self.player_score += 1
                    self.player_wins_round = True
                elif self.player_attack_type == AttackType.PAPER and self.computer_attack_type == AttackType.SCISSORS:
                    self.computer_score += 1
                else:
                    self.ronde_nulle = True
            self.computer_attack.on_update()
            if self.player_score < 3 and self.computer_score < 3:
                self.game_state = GameState.ROUND_DONE
            else:
                self.game_state = GameState.GAME_OVER
    def on_key_press(self, key, key_modifiers):
        if key == arcade.key.SPACE:
            if self.game_state == GameState.NOT_STARTED:
                self.game_state = GameState.ROUND_ACTIVE
            elif self.game_state == GameState.ROUND_DONE:
                self.game_state = GameState.ROUND_ACTIVE
                # Initialiser les variables du jeu
                self.player_attack_type = None
                self.computer_attack_type = None
                self.player_attacked = False
                self.player_wins_round = False
                self.ronde_nulle = False
            elif self.game_state == GameState.GAME_OVER:
                self.game_state = GameState.NOT_STARTED
                # Initialiser les variables du jeu et le pointage
                self.player_attack_type = None
                self.computer_attack_type = None
                self.player_attacked = False
                self.player_wins_round = False
                self.ronde_nulle = False
                self.player_score = 0
                self.computer_score = 0
    def on_mouse_press(self, x, y, button, key_modifiers):
        if self.game_state == GameState.NOT_STARTED:
            self.game_state = GameState.ROUND_ACTIVE
        if self.rock.collides_with_point((x, y)):
            self.player_attack_type = AttackType.ROCK
            self.player_attacked = True
            self.rock = AttackAnimation(AttackType.ROCK)
        elif self.paper.collides_with_point((x, y)):
            self.player_attack_type = AttackType.PAPER
            self.player_attacked = True
            self.paper = AttackAnimation(AttackType.PAPER)
        elif self.scissors.collides_with_point((x, y)):
            self.player_attack_type = AttackType.SCISSORS
            self.player_attacked = True
            self.scissors = AttackAnimation(AttackType.SCISSORS)
def main():
    game = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, SCREEN_TITLE)
    game.setup()
    arcade.run()
if __name__ == "__main__":
    main()
